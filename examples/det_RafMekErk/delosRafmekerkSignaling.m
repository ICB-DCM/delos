% Main file of the RafMekErk signaling example
%
% Demonstrates the use of:
% * getMultiStarts()
%
% Demostrates furhtermore
% * that non-evaluable points in parameter space can occur
% * how different local optimization methods perform (fmincon and
%   lsqnonlin)
% * how to use lsqnonlin as local optimizer
%
% This example provides a model for the RafMekErk signaling pathway with
% the different treatment conditions. The model has been taken from the
% publication "Tailored parameter optimization methods for ordinary
% differential equation models with steady-state constraints" by Fiedler et
% al., 2016, in "BMC Systems Biology".
%
% The data used is measurement data provided in the publications.
%
% This file performs a multistart local optimization based on measured data 
% from the referenced papers, demonstrating the use of getMultiStarts().


%% Preliminary

clear;
% close all;
clc;

TextSizes.DefaultAxesFontSize = 14;
TextSizes.DefaultTextFontSize = 18;
set(0,TextSizes);

% Seed random number generator
rng(0);

%% Model Definition
% The ODE model is set up using the AMICI toolbox. To access the AMICI
% model setup, see rafmekerk_pesto_syms.m
% For a detailed description for the biological model see the referenced
% paper by Fiedler et al.

% Wrap models for AMICI simulation, if necessary
[exdir,~,~] = fileparts(which('rafmekerk_delos_syms.m'));
% amiwrap('rafmekerk_delos','rafmekerk_delos_syms',exdir);
addpath(genpath('../../grid_tools'));

%% Data
% Load data
load('./data.mat');
u   = D.conditions;
n_u = size(u,1);
n_theta = 20;
n_sigma = 8;

% Clean up data and make Amici-readable data out of it
for j = 1 : n_u
    amiData(j) = struct(...
        't', D.t{j}, ...
        'condition', D.conditions(j,:), ...
        'Y', D.measurement{j} ...
        );
end
amiD(1) = amidata(amiData(1));
amiD(2) = amidata(amiData(2));
amiD(3) = amidata(amiData(3));


%% Generation of the structs and options for PESTO
% The structs and the PestoOptions object, which are necessary for the 
% PESTO routines to work are created and set to convenient values

% parameters struct
% 12 dynamic parameters, 8 scaling parameters, 8 sigma parameters
parameters.number     =  n_theta + n_sigma;
parameters.min        = -5 * ones(28,1);
parameters.min(7)     = -10;
parameters.min(9)     = -7;
parameters.max        = 4 * ones(28,1);
parameters.max(1:3)   = 5;
parameters.max(4)     = 6;
parameters.max(13:20) = 8;
parameters.name = {'log_{10}(kdf_{Raf})','log_{10}(kp_{Raf})','log_{10}(kdp_{pMek})',...
                   'log_{10}(kp_{pRaf_{Mek}})','log_{10}(kdp_{pErk})','log_{10}(kp_{pMek_{Erk}})',...
                   'log_{10}(K_{pErk_{inh}})','log_{10}(sust_{Ras_0})','log_{10}(ts_{sust_{Ras}})',...
                   'log_{10}(ts_{trans_{Ras}})','log_{10}(K_{Sora})','log_{10}(K_{UO})',... 
                   'log_{10}(scale_{pMek_{20140430_{gel1}}})','log_{10}(scale_{pErk_{20140430_{gel1}}})',...
                   'log_{10}(scale_{pMek_{20140430_{gel2}}})','log_{10}(scale_{pErk_{20140430_{gel2}}})',...
                   'log_{10}(scale_{pMek_{20140505_{gel1}}})','log_{10}(scale_{pErk_{20140505_{gel1}}})',...
                   'log_{10}(scale_{pMek_{20140505_{gel2}}})','log_{10}(scale_{pErk_{20140505_{gel2}}})',... 
                   'log_{10}(sigma_{pMek_{20140430_{gel1}}})','log_{10}(sigma_{pErk_{20140430_{gel1}}})',...
                   'log_{10}(sigma_{pMek_{20140430_{gel2}}})','log_{10}(sigma_{pErk_{20140430_{gel2}}})',...
                   'log_{10}(sigma_{pMek_{20140505_{gel1}}})','log_{10}(sigma_{pErk_{20140505_{gel1}}})',...
                   'log_{10}(sigma_{pMek_{20140505_{gel2}}})','log_{10}(sigma_{pErk_{20140505_{gel2}}})'...
                   };

% objective function
objectiveFunction = @(theta) logLikelihoodRMEDelos(theta, amiD);

options          = PestoOptions();
options.trace    = true;
options.obj_type = 'log-posterior';
options.mode     = 'visual';
options.localOptimizer = 'delos';

% Multi-start local optimization part
options.n_starts = 20;
    %% Optimizer settings
    
% options.localOptimizer = 'fmincon';
% options.localOptimizerOptions = optimset(...
%     'Algorithm', 'interior-point',...
%     'GradObj', 'on',...
%     'Display', 'iter', ... 'Hessian', 'on', ... uncomment this to use the Hessian for optimization 
%     'MaxIter', 1000,...
%     'TolFun', 1e-10,...
%     'TolX', 1e-12,...
%     'TolGrad', 1e-6,...
%     'MaxFunEvals', 1000*parameters.number);

    OptimizerOptions = struct(...
                'stochastic', false,...
                'miniBatchSize', 1, ...
                'dataSetSize', 1, ...
                'barrier', 'log-barrier', ...
                'TolX', 1e-8, ...
                'display', 'console', ...
                'outputID', [], ...
                'restriction', true, ...
                'reportInterval', 10, ...
                'method', 'adadelta', ...
                'MaxIter', 1000);
           
%     % rmsprop
%     OptimizerOptions.method = 'rmsprop';
%     OptimizerOptions.hyperparams = struct('rho', 0.9, ...
%                 'delta', 1e-8, ...
%                 'eps0', 0.5, ...
%                 'epsTau', 0.001, ...
%                 'tau', 30);
%     options.localOptimizerOptions = OptimizerOptions;
            
    % rmspropnesterov      
    OptimizerOptions.method = 'rmspropnesterov';
    OptimizerOptions.hyperparams = struct('rho', 0.5, ...
                'alphaStart', 0.5, ...
                'alphaEnd', 0.9, ...
                'tauAlpha', 500, ...                
                'delta', 1e-7, ...
                'eps0', 0.1, ...
                'epsTau', 1e-4, ...
                'tauEpsil', 750);  
    options.localOptimizerOptions = OptimizerOptions;
    
%     % adam
%     OptimizerOptions.method = 'adam';
%     OptimizerOptions.hyperparams = struct(...
%                 'rho1', 0.5, ...
%                 'rho2', 0.5, ...
%                 'delta', 1e-8, ...
%                 'tau', 1000, ...
%                 'epsTau', 1e-5, ...
%                 'eps0', 0.1);
%     options.localOptimizerOptions = OptimizerOptions;
     
%    % adadelta
%     OptimizerOptions.method = 'adadelta';
%     OptimizerOptions.hyperparams = struct(...
%                 'rho', 0.5, ...
%                 'eps0', 0.1, ...
%                 'delta0', 0.01, ...
%                 'deltaTau', 0.01, ...
%                 'tau', 30);
%     options.localOptimizerOptions = OptimizerOptions;
    
% Run getMultiStarts
fprintf('\n Perform optimization...');

parametersMultistart = getMultiStarts(parameters, objectiveFunction, options);